#pragma kernel CSMain  

#define NUM_THREAD_X 8 
#define NUM_THREAD_Y 1 
#define NUM_THREAD_Z 1 

#define PI 3.14159265

struct ParticleData
{
	float3 velocity; // 速度
	float3 position; // 位置
    float3 acceleration;
    float2 shrinkExtends;
    float3 origPosition;
    float2 texCoords;
    float freq;
};

cbuffer CB
{
	float3 _PreviousOffset;
	float3 _CurrentOffset;
    float3 _PreviousRotation;
    float3 _CurrentRotation;
    float _resetDistanceThreshold;
	float  _TimeStep;
	uint _ParticleCount;
}

RWStructuredBuffer<ParticleData> _ParticleBuffer;

inline float3x3 xRotation3dRadians(float rad) {
    float s = sin(rad);
    float c = cos(rad);
    return float3x3(
        1, 0, 0,
        0, c, -s,
        0, s, c);
}
 
inline float3x3 yRotation3dRadians(float rad) {
    float s = sin(rad);
    float c = cos(rad);
    return float3x3(
        c, 0, s,
        0, 1, 0,
        -s, 0, c);
}
 
inline float3x3 zRotation3dRadians(float rad) {
    float s = sin(rad);
    float c = cos(rad);
    return float3x3(
        c, -s, 0,
        s, c, 0,
        0, 0, 1);
}

inline float3 RotateRadians(float3 rotation, float3 currentPosition){
    float3 xRotatedPosition = mul(xRotation3dRadians(radians(rotation.x)), currentPosition);
    float3 yRotatedPosition = mul(yRotation3dRadians(radians(rotation.y)), xRotatedPosition);
    float3 zRotatedPosition = mul(zRotation3dRadians(radians(rotation.z)), yRotatedPosition);
    return zRotatedPosition;
}

float rand(float2 co)
{
    return frac(sin(dot(co.xy, float2(12.9898,78.233))) * 43758.5453);
}

[numthreads(NUM_THREAD_X,NUM_THREAD_Y,NUM_THREAD_Z)]
void CSMain ( uint3 Gid  : SV_GroupID,
              uint3 GTid : SV_GroupThreadID,
              uint3 DTid : SV_DispatchThreadID,
			  uint  GI   : SV_GroupIndex )
{
    float3 offset = _CurrentOffset - _PreviousOffset;
    float3 rotationOffset = _CurrentRotation - _PreviousRotation;
    float3 center = _CurrentOffset;
	int idx = DTid.x;
	float3 velocity = _ParticleBuffer[idx].velocity;
	float3 position = _ParticleBuffer[idx].position;
    float3 acceleration = _ParticleBuffer[idx].acceleration;
    velocity += acceleration * _TimeStep ;;
    position += velocity * _TimeStep ; 
    float3 rotatedPosition = RotateRadians(rotationOffset, position);
    if (length(position - _ParticleBuffer[idx].origPosition) > _resetDistanceThreshold)
    {
        _ParticleBuffer[idx].velocity = velocity;
        _ParticleBuffer[idx].position = _ParticleBuffer[idx].origPosition + _CurrentOffset;
    }
    else
    {
        _ParticleBuffer[idx].velocity = velocity;
        _ParticleBuffer[idx].position = rotatedPosition + offset;
    }
    // TODO: write buffer that is gonna be used for geometry shader simulation
}
